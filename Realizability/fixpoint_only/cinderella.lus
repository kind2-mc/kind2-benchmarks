type turn = enum {CINDERELLA, STEPMOTHER};

const C = 3.0;

node imported game (
  i1 : real;
  i2 : real;
  i3 : real;
  i4 : real;
  i5 : real
) returns (
  e : int
);
(*@contract
  var turn : turn = (CINDERELLA) -> (if ((pre (turn)) = (CINDERELLA)) then (STEPMOTHER) else (CINDERELLA));
  var b1 : real = (0.0) -> (if ((turn) = (STEPMOTHER)) then ((i1) + (pre (b1))) else (if (((e) = (5)) or ((e) = (1))) then (0.0) else (pre (b1))));
  var b2 : real = (0.0) -> (if ((turn) = (STEPMOTHER)) then ((i2) + (pre (b2))) else (if (((e) = (1)) or ((e) = (2))) then (0.0) else (pre (b2))));
  var b3 : real = (0.0) -> (if ((turn) = (STEPMOTHER)) then ((i3) + (pre (b3))) else (if (((e) = (2)) or ((e) = (3))) then (0.0) else (pre (b3))));
  var b4 : real = (0.0) -> (if ((turn) = (STEPMOTHER)) then ((i4) + (pre (b4))) else (if (((e) = (3)) or ((e) = (4))) then (0.0) else (pre (b4))));
  var b5 : real = (0.0) -> (if ((turn) = (STEPMOTHER)) then ((i5) + (pre (b5))) else (if (((e) = (4)) or ((e) = (5))) then (0.0) else (pre (b5))));
  var ok : bool = ((((((b1) <= (C)) and ((b2) <= (C))) and ((b3) <= (C))) and ((b4) <= (C))) and ((b5) <= (C))) and ((((((e) = (1)) or ((e) = (2))) or ((e) = (3))) or ((e) = (4))) or ((e) = (5)));
  assume (((((i1) >= (0.0)) and ((i2) >= (0.0))) and ((i3) >= (0.0))) and ((i4) >= (0.0))) and ((i5) >= (0.0));
  assume (((((i1) + (i2)) + (i3)) + (i4)) + (i5)) = (1.0);
  guarantee ok;
*)


