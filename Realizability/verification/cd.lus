node Sofar (
  X : bool
) returns (
  Sofar : bool
);
let
  Sofar = (X) -> ((X) and (pre (Sofar)));
tel

node Environment (
  diff : int;
  plus : bool;
  minus : bool
) returns (
  ok : bool
);
let
  ok = ((((-(4)) <= (diff)) and ((diff) <= (4))) and (if ((true) -> (pre (plus))) then ((diff) >= (1)) else (true))) and (if ((false) -> (pre (minus))) then ((diff) <= (-(1))) else (true));
tel

node Property (
  speed : int
) returns (
  ok : bool
);
var
  cpt : int;
  acceptable : bool;
let
  acceptable = ((8) <= (speed)) and ((speed) <= (12));
  cpt = (0) -> (if (acceptable) then (0) else ((pre (cpt)) + (1)));
  ok = (true) -> ((pre (cpt)) <= (7));
tel

node imported top (
  diff : int
) returns (
  speed : int;
  plus : bool;
  minus : bool
);
(*@contract
  var realistic : bool = Environment(diff, plus, minus);
  var OK : bool = (Sofar(((realistic) and ((0) <= (speed))) and ((speed) < (16)))) => (Property(speed));
  guarantee OK;
*)


