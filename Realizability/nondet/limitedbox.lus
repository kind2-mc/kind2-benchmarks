type turn = enum {P0, P1};

node imported limitedbox (

) returns (
  posx : int;
  posy : int
);
(*@contract
  var turn : turn = (P0) -> (if ((pre (turn)) = (P0)) then (P1) else (P0));
  var t1 : bool = (((((pre (posy)) = (posy)) or ((pre (posy)) = ((posy) + (1)))) or ((pre (posy)) = ((posy) - (1)))) and ((pre (posx)) = (posx))) and ((pre (turn)) = (P0));
  var t2 : bool = (((((pre (posx)) = (posx)) or ((pre (posx)) = ((posx) + (1)))) or ((pre (posx)) = ((posx) - (1)))) and ((pre (posy)) = (posy))) and ((pre (turn)) = (P1));
  var ok : bool = (((posy) >= ((posx) - (2))) and ((posy) <= ((posx) + (2)))) -> (((t1) or (t2)) => (((posy) >= ((posx) - (2))) and ((posy) <= ((posx) + (2)))));
  guarantee ok;
*)


