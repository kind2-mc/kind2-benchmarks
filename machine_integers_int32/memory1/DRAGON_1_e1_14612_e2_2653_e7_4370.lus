node Sofar( X : bool ) returns ( Sofar : bool );
let
    Sofar = X -> X or pre Sofar;
tel
node excludes12( X1, X2, X3, X4, X5, X6, X7, X8, X9, X10, X11, X12 : bool ) returns ( excludes : bool );
let
    excludes = not X1 and not X2 and not X3 and not X4 and not X5 and not X6 and not X7 and not X8 and not X9 and not X10 and not X11 and not X12 or
                  X1 and not X2 and not X3 and not X4 and not X5 and not X6 and not X7 and not X8 and not X9 and not X10 and not X11 and not X12 or
              not X1 and     X2 and not X3 and not X4 and not X5 and not X6 and not X7 and not X8 and not X9 and not X10 and not X11 and not X12 or
              not X1 and not X2 and     X3 and not X4 and not X5 and not X6 and not X7 and not X8 and not X9 and not X10 and not X11 and not X12 or
              not X1 and not X2 and not X3 and     X4 and not X5 and not X6 and not X7 and not X8 and not X9 and not X10 and not X11 and not X12 or
              not X1 and not X2 and not X3 and not X4 and     X5 and not X6 and not X7 and not X8 and not X9 and not X10 and not X11 and not X12 or
              not X1 and not X2 and not X3 and not X4 and not X5 and     X6 and not X7 and not X8 and not X9 and not X10 and not X11 and not X12 or
              not X1 and not X2 and not X3 and not X4 and not X5 and not X6 and     X7 and not X8 and not X9 and not X10 and not X11 and not X12 or
              not X1 and not X2 and not X3 and not X4 and not X5 and not X6 and not X7 and     X8 and not X9 and not X10 and not X11 and not X12 or
              not X1 and not X2 and not X3 and not X4 and not X5 and not X6 and not X7 and not X8 and     X9 and not X10 and not X11 and not X12 or
              not X1 and not X2 and not X3 and not X4 and not X5 and not X6 and not X7 and not X8 and not X9 and     X10 and not X11 and not X12 or
              not X1 and not X2 and not X3 and not X4 and not X5 and not X6 and not X7 and not X8 and not X9 and not X10 and     X11 and not X12 or
              not X1 and not X2 and not X3 and not X4 and not X5 and not X6 and not X7 and not X8 and not X9 and not X10 and not X11 and     X12;
tel
node DRAGON(e01, e02, e03, e04, e05, e06, e07, e08, e09, e10, e11, e12 : bool;
init_invalid : int32)
returns(exclusive, shared, shared_dirty, dirty, invalid : int32; erreur : bool);
var
   g01, g02, g03, g04, g05, g06, g07, g08, g09, g10, g11, g12 : bool;
   mem_init : int32;
let
   mem_init = init_invalid -> pre mem_init;
   erreur = if(exclusive >= (int32 2)) then true else false;
   g01 = pre invalid>=(int32 1) and pre dirty=(int32 0) and pre shared=(int32 0) and pre exclusive=(int32 0) and pre shared_dirty=(int32 0);
   g02 = pre invalid>=(int32 1) and pre dirty +(int32 1)+ pre shared -(int32 1)+ pre exclusive + pre shared_dirty>=(int32 1);
   g03 = pre exclusive>=(int32 1);
   g04 = pre shared_dirty=(int32 1) and pre shared=(int32 0);
   g05 = pre shared_dirty=(int32 0) and pre shared=(int32 1);
   g06 = pre shared_dirty + pre shared>=(int32 2);
   g07 = pre invalid>=(int32 1) and pre dirty=(int32 0) and pre shared=(int32 0) and pre exclusive=(int32 0) and pre shared_dirty=(int32 0);
   g08 = pre invalid>=(int32 1) and pre dirty + pre shared + pre exclusive + pre shared_dirty>=(int32 1);
   g09 = pre dirty>=(int32 1);
   g10 = pre shared>=(int32 1);
   g11 = pre shared_dirty>=(int32 1);
   g12 = pre exclusive>=(int32 1);
   exclusive = (int32 0) -> 
   if(e01) then if(g01) then pre exclusive+(int32 1) else pre exclusive else 
   if(e02) then if(g02) then (int32 0) else pre exclusive else 
   if(e03) then if(g03) then pre exclusive-(int32 1) else pre exclusive else 
   if(e08) then if(g08) then (int32 0) else pre exclusive else 
   if(e12) then if(g12) then pre exclusive-(int32 1) else pre exclusive else 
   pre exclusive;
   shared = (int32 0) -> 
   if(e02) then if(g02) then pre shared+pre exclusive+(int32 1) else pre shared else 
   if(e05) then if(g05) then (int32 0) else pre shared else 
   if(e06) then if(g06) then pre shared+pre shared_dirty-(int32 1) else pre shared else
   if(e08) then if(g08) then pre shared+pre exclusive+pre shared_dirty+pre dirty else pre shared else 
   if(e10) then if(g10) then pre shared-(int32 1) else pre shared else 
   pre shared;
   shared_dirty = (int32 0) -> 
   if(e02) then if(g02) then pre shared_dirty+pre dirty else pre shared_dirty else 
   if(e04) then if(g04) then (int32 0) else pre shared_dirty else 
   if(e06) then if(g06) then (int32 1) else pre shared_dirty else 
   if(e08) then if(g08) then (int32 1) else pre shared_dirty else 
   if(e11) then if(g11) then pre shared_dirty-(int32 1) else pre shared_dirty else 
   pre shared_dirty;
   dirty = (int32 0) -> 
   if(e02) then if(g02) then (int32 0) else pre dirty else 
   if(e03) then if(g03) then pre dirty+(int32 1) else pre dirty else 
   if(e04) then if(g04) then pre dirty+(int32 1) else pre dirty else 
   if(e05) then if(g05) then pre dirty+(int32 1) else pre dirty else 
   if(e07) then if(g07) then pre dirty+(int32 1) else pre dirty else 
   if(e08) then if(g08) then (int32 0) else pre dirty else 
   if(e09) then if(g09) then pre dirty-(int32 1) else pre dirty else 
   pre dirty;
   invalid = mem_init -> 
   if(e01) then if(g01) then pre invalid-(int32 1) else pre invalid else 
   if(e02) then if(g02) then pre invalid-(int32 1) else pre invalid else 
   if(e07) then if(g07) then pre invalid-(int32 1) else pre invalid else 
   if(e08) then if(g08) then pre invalid-(int32 1) else pre invalid else 
   if(e09) then if(g09) then pre invalid+(int32 1) else pre invalid else 
   if(e10) then if(g10) then pre invalid+(int32 1) else pre invalid else 
   if(e11) then if(g11) then pre invalid+(int32 1) else pre invalid else 
   if(e12) then if(g12) then pre invalid+(int32 1) else pre invalid else 
   pre invalid;
tel
node top( e01, e02, e03, e04, e05, e06, e07, e08, e09, e10, e11, e12 : bool;
         init_invalid : int32 ) returns ( OK : bool );
    var exclusive, shared, shared_dirty, dirty, invalid : int32;
        erreur : bool;
let
    ( exclusive, shared, shared_dirty, dirty, invalid, erreur ) =
        DRAGON( e01, e02, e03, e04, e05, e06, e07, e08, e09, e10, e11, e12,
                init_invalid );
    OK = Sofar( excludes12( e01, e02, e03, e04, e05, e06, e07, e08, e09, e10,
                            e11, e12 ) and
                init_invalid > (int32 0) )
         => not erreur;
  --%MAIN;
  --%PROPERTY OK;
tel
