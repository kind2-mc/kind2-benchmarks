type software_types__controloutput__impl = struct {armed : bool; pitch : real; roll : real; throttle : real; time : int; yaw : real};
type software_types__userinput_result__impl = struct {pitch : real; roll : real; throttle : real; time : int; xsource : int; yaw : real};
type software_types__position__impl = struct {alt : int; dop : real; fix : int; heading : real; lat : int; lon : int; num_sv : int; time : int; vdown : int; veast : int; vground : int; vnorth : int};
type software_types__control_law__impl = struct {armed_mode : int; autothr_source : int; head_source : int; stab_source : int; thr_mode : int; time : int; ui_source : int; yaw_mode : int};

node imported main (
  waypoints___EVENT_ : bool;
  user_input___EVENT_ : bool;
  user_input : software_types__userinput_result__impl;
  control_law___EVENT_ : bool;
  control_law : software_types__control_law__impl;
  mission_in___EVENT_ : bool
) returns (
  mission_out___EVENT_ : bool;
  mavlink_out___EVENT_ : bool;
  sensor_data___EVENT_ : bool;
  sensor_data : software_types__position__impl;
  control_data___EVENT_ : bool;
  control_data : software_types__controloutput__impl;
  motmix_data___EVENT_ : bool
);
(*@contract
  var __GUARANTEE0 : bool = (mission_out___EVENT_) => (((waypoints___EVENT_) or (user_input___EVENT_)) or (control_law___EVENT_));
  var __GUARANTEE1 : bool = ((((mavlink_out___EVENT_) or (sensor_data___EVENT_)) or (control_data___EVENT_)) or (motmix_data___EVENT_)) => (mission_in___EVENT_);
  guarantee __GUARANTEE0;
  guarantee __GUARANTEE1;
*)


