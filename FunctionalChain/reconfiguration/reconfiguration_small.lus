-- Counts the cycles during which 'signal' is active.
-- Output becomes true when the counter goes above 'n'.
node conf1(signal: bool; n: int) returns (out: bool);
var
  pre_cpt, cpt: int;
let
  pre_cpt = 0 -> pre(cpt);

  cpt = if signal then
          (if pre_cpt < n then pre_cpt + 1
           else pre_cpt)
        else 0;

  out = cpt >= n;
tel

-- Once x becomes true the node will always output true.
node latch(in: bool) returns (out: bool);
var
  pre_out: bool;
let
  pre_out = in -> pre(out);
  out = in or pre_out;
tel


-- Monitors a signal and clamps it inside range.
-- Output 'out_of_range' indicates that the signal
-- is currently out of range.
-- If the signals stays out of range for more than
-- 'n' consecutive steps, the 'corrupt' flag is raised
-- and stays that way for ever.
node range_monitor(
  signal, default_signal, min, max: real; 
  n:int
) returns (
  out_of_range, corrupt: bool; 
  ranged_signal: real
);
let
  assert(min < max);

  out_of_range = signal > max or min < signal;

  corrupt = latch(conf1(out_of_range, n));

  ranged_signal =
    if corrupt then default_signal
    else (if signal > max then max
          else (if signal < min then min
                               else signal));

tel

-- Input command is in command if its failure flag
-- is not raised and no one else has been in command
-- for at least n cycles.
-- If not in command, 'safe_command_value' is output.
node priority(
  command, safe_command_value: real; 
  command_failure, other_in_command: bool;
  n: int
) returns (
  safe_command: real; 
  in_command: bool
);
let
  in_command = not command_failure and conf1(not other_in_command, n);
  safe_command = if in_command then command else safe_command_value;
tel


-- Three channels reconfiguration logic with error
-- confirmation and delayed delegation of command.
-- Each channel takes input from a sensor, which is typically
-- the output of some voting logic system.
node reconfiguration(
  sensor_value1, sensor_value2, sensor_value3: real
) returns (
  command: real; no_command: bool;
);

var
  safe_command1, safe_command2, safe_command3: real; 
  in_command1,   in_command2,   in_command3:   bool;
  ok: bool;

  ranged_sensor1, ranged_sensor2, ranged_sensor3:real;
  max, min: real;
  default_value: real;
  out_of_range1, out_of_range2, out_of_range3: bool;
  corrupt1, corrupt2, corrupt3: bool;

  safe_value: real;
  n1, n2, n3: int;
  m1, m2, m3: int;
let
  -- "10^-9" assumption on sensors.
  assert (not corrupt1 or not corrupt2 or not corrupt3);
  -- This is needed to ensure channels consistently pass command.
  assert (m1 < m2 and m2 < m3);
  -- Safe is 0.0 (see 'command = ...').
  assert (safe_value = 0.0);

  -- Sensor range.
  max = 25.0;
  min = -25.0;
  -- Sensor value if corrupt.
  default_value = 0.0;

  -- Safe value for faulty channels.
  safe_value = 0.0;

  -- Constants for the timers of the systems.
  n1 = 10;
  n2 = 12;
  n3 = 15;
  m1 = 5;
  m2 = 7;
  m3 = 11;

  -- Flags and ranged values on input sensors.
  (out_of_range1, corrupt1, ranged_sensor1) = range_monitor(sensor_value1, default_value, min, max, n1);
  (out_of_range2, corrupt2, ranged_sensor2) = range_monitor(sensor_value2, default_value, min, max, n2);
  (out_of_range3, corrupt3, ranged_sensor3) = range_monitor(sensor_value3, default_value, min, max, n3);

  -- Channels command values and flags.
  (safe_command1,  in_command1) = priority(ranged_sensor1, safe_value, corrupt1, false, m1);
  (safe_command2,  in_command2) = priority(ranged_sensor2, safe_value, corrupt2, in_command1, m2);
  (safe_command3,  in_command3) = priority(ranged_sensor3, safe_value, corrupt3, in_command1 or in_command2, m3);

  -- Actual (safe) command.
  command = safe_command1 +  safe_command2 +  safe_command3;
  -- No one is in command when transitionning from one channel to another...
  no_command = not(in_command1 or in_command2 or in_command3);

  -- ... but it cannot be true forever. Hopefully.
  ok = not conf1(no_command, 15);

  --%PROPERTY ok;
  --%MAIN;
tel