node Defs__rising (
  signal : bool
) returns (
  result : bool
);
let
  result = (false) -> ((pre (not (signal))) and (signal));
tel

node Defs__high_for (
  signal : bool
) returns (
  result : int
);
let
  result = if (signal) then ((1) -> ((pre (result)) + (1))) else (0);
tel

node imported main (
  left_shift : bool;
  right_shift : bool
) returns (
  leader : int;
  right : int;
  left : int;
  pend_leader : int;
  pend_right : int;
  pend_left : int
);
(*@contract
  var __GUARANTEE0 : bool = ((leader) >= (0)) and ((leader) <= (3));
  var __GUARANTEE1 : bool = ((right) >= (0)) and ((right) <= (3));
  var __GUARANTEE2 : bool = ((left) >= (0)) and ((left) <= (3));
  var __GUARANTEE3 : bool = ((pend_leader) >= (0)) and ((pend_leader) <= (3));
  var __GUARANTEE4 : bool = ((pend_right) >= (0)) and ((pend_right) <= (3));
  var __GUARANTEE5 : bool = ((pend_left) >= (0)) and ((pend_left) <= (3));
  var __GUARANTEE6 : bool = ((((pend_leader) <> (3)) => (((pend_leader) <> (pend_right)) and ((pend_leader) <> (pend_left)))) and (((pend_right) <> (3)) => (((pend_leader) <> (pend_right)) and ((pend_right) <> (pend_left))))) and (((pend_left) <> (3)) => (((pend_leader) <> (pend_left)) and ((pend_right) <> (pend_left))));
  var __GUARANTEE7 : bool = ((((leader) <> (3)) => (((leader) <> (right)) and ((leader) <> (left)))) and (((right) <> (3)) => (((right) <> (leader)) and ((right) <> (left))))) and (((left) <> (3)) => (((left) <> (leader)) and ((left) <> (right))));
  var __GUARANTEE8 : bool = ((((((((leader) = (0)) or ((right) = (0))) or ((left) = (0))) or ((pend_leader) = (0))) or ((pend_right) = (0))) or ((pend_left) = (0))) and (((((((leader) = (1)) or ((right) = (1))) or ((left) = (1))) or ((pend_leader) = (1))) or ((pend_right) = (1))) or ((pend_left) = (1)))) and (((((((leader) = (2)) or ((right) = (2))) or ((left) = (2))) or ((pend_leader) = (2))) or ((pend_right) = (2))) or ((pend_left) = (2)));
  var __GUARANTEE9 : bool = (true) -> (((pre (pend_right)) <> (3)) => (((pre (pend_right)) <> (pend_right)) => ((right) = (pre (pend_right)))));
  var __GUARANTEE10 : bool = (true) -> (((pre (pend_left)) <> (3)) => (((pre (pend_left)) <> (pend_left)) => ((left) = (pre (pend_left)))));
  var __GUARANTEE11 : bool = (true) -> (((pre (pend_leader)) <> (3)) => (((pre (pend_leader)) <> (pend_leader)) => ((leader) = (pre (pend_leader)))));
  var __GUARANTEE12 : bool = (true) -> (((leader) <> (pre (leader))) => (((pre (leader)) = (3)) or ((leader) = (3))));
  var __GUARANTEE13 : bool = (true) -> (((right) <> (pre (right))) => (((pre (right)) = (3)) or ((right) = (3))));
  var __GUARANTEE14 : bool = (true) -> (((left) <> (pre (left))) => (((pre (left)) = (3)) or ((left) = (3))));
  var __GUARANTEE15 : bool = (true) -> ((((((pend_right) = (pre (leader))) and ((pend_right) <> (3))) => (last_shift_right)) and ((((pend_left) = (pre (right))) and ((pend_left) <> (3))) => (last_shift_right))) and ((((pend_leader) = (pre (left))) and ((pend_leader) <> (3))) => (last_shift_right)));
  var __GUARANTEE16 : bool = (true) -> ((((((pend_right) = (pre (left))) and ((pend_right) <> (3))) => (last_shift_left)) and ((((pend_left) = (pre (leader))) and ((pend_left) <> (3))) => (last_shift_left))) and ((((pend_leader) = (pre (right))) and ((pend_leader) <> (3))) => (last_shift_left)));
  var __GUARANTEE17 : bool = (true) -> (((not (pre (pending))) and (not ((left_shift) or (right_shift)))) => (not (pending)));
  var last_shift_left : bool = (false) -> ((Defs__rising(left_shift)) or ((pre (last_shift_left)) and (not (Defs__rising(right_shift)))));
  var last_shift_right : bool = (false) -> ((Defs__rising(right_shift)) or ((pre (last_shift_right)) and (not (Defs__rising(left_shift)))));
  var pending : bool = (((leader) = (3)) or ((right) = (3))) or ((left) = (3));
  var left_shift_time : int = Defs__high_for(left_shift);
  var right_shift_time : int = Defs__high_for(right_shift);
  assume not ((left_shift) and (right_shift));
  assume (true) -> (((Defs__rising(left_shift)) or (Defs__rising(right_shift))) => (not (pre (pending))));
  assume (true) -> ((pre (((0) < (left_shift_time)) and ((left_shift_time) < (3)))) => (left_shift));
  assume (true) -> ((pre (((0) < (right_shift_time)) and ((right_shift_time) < (3)))) => (right_shift));
  guarantee __GUARANTEE0;
  guarantee __GUARANTEE1;
  guarantee __GUARANTEE2;
  guarantee __GUARANTEE3;
  guarantee __GUARANTEE4;
  guarantee __GUARANTEE5;
  guarantee __GUARANTEE6;
  guarantee __GUARANTEE7;
  guarantee __GUARANTEE8;
  guarantee __GUARANTEE9;
  guarantee __GUARANTEE10;
  guarantee __GUARANTEE11;
  guarantee __GUARANTEE12;
  guarantee __GUARANTEE13;
  guarantee __GUARANTEE14;
  guarantee __GUARANTEE15;
  guarantee __GUARANTEE16;
  guarantee __GUARANTEE17;
*)


