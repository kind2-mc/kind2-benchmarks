--
-- Source: N. Halbwachs, P Raymond "A Tutorial of Lustre", (int32 2002)
--

node counter( init, incr : int32; x, reset : bool ) returns ( c : int32 );
    var pc : int32;
let
    pc = init -> pre c;
    c = if reset then init
        else if x and pc > -(int32 1000) and pc < (int32 1000) then pc + incr
--        else if x then pc + incr
        else pc;
tel


node speed( beacon, second : bool ) returns ( late, early : bool );
    var diff, incr : int32;
let
    incr = if beacon and not second then (int32 1)
           else if second and not beacon then -(int32 1)
           else (int32 0);
    diff = counter( (int32 0), incr, beacon or second, false );
    early = false -> if pre early then diff > (int32 0)
                     else diff >= (int32 10);
    late = false -> if pre late then diff < (int32 0)
                    else diff <= -(int32 10);
tel

node top( beacon, second : bool ) returns ( OK : bool );
    var late, early : bool;
let
    ( late, early ) = speed( beacon, second );
    OK = not ( late and early ) and
           (true -> not ( late and pre early )) and
           (true -> not ( pre late and early ));
    --%PROPERTY OK;
    --%MAIN;
tel
